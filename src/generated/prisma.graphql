# source: http://localhost:4466/book/dev
# timestamp: Fri Mar 06 2020 12:37:35 GMT+0300 (GMT+03:00)

type AggregateOwnBook {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type AggregateWishBook {
  count: Int!
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

"""Raw JSON value"""
scalar Json

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createUser(data: UserCreateInput!): User!
  createOwnBook(data: OwnBookCreateInput!): OwnBook!
  createWishBook(data: WishBookCreateInput!): WishBook!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateOwnBook(data: OwnBookUpdateInput!, where: OwnBookWhereUniqueInput!): OwnBook
  updateWishBook(data: WishBookUpdateInput!, where: WishBookWhereUniqueInput!): WishBook
  deleteUser(where: UserWhereUniqueInput!): User
  deleteOwnBook(where: OwnBookWhereUniqueInput!): OwnBook
  deleteWishBook(where: WishBookWhereUniqueInput!): WishBook
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  upsertOwnBook(where: OwnBookWhereUniqueInput!, create: OwnBookCreateInput!, update: OwnBookUpdateInput!): OwnBook!
  upsertWishBook(where: WishBookWhereUniqueInput!, create: WishBookCreateInput!, update: WishBookUpdateInput!): WishBook!
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  updateManyOwnBooks(data: OwnBookUpdateManyMutationInput!, where: OwnBookWhereInput): BatchPayload!
  updateManyWishBooks(data: WishBookUpdateManyMutationInput!, where: WishBookWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  deleteManyOwnBooks(where: OwnBookWhereInput): BatchPayload!
  deleteManyWishBooks(where: WishBookWhereInput): BatchPayload!
  executeRaw(database: PrismaDatabase, query: String!): Json!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

type OwnBook implements Node {
  id: ID!
  name: String!
  author: String
  published_year: Int
  genre: Int
  imageId: String
  sharingType: Int
  user: User!
  search: String
}

"""A connection to a list of items."""
type OwnBookConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [OwnBookEdge]!
  aggregate: AggregateOwnBook!
}

input OwnBookCreateInput {
  id: ID
  name: String!
  author: String
  published_year: Int
  genre: Int
  imageId: String
  sharingType: Int
  search: String
  user: UserCreateOneWithoutOwnBooksInput!
}

input OwnBookCreateManyWithoutUserInput {
  create: [OwnBookCreateWithoutUserInput!]
  connect: [OwnBookWhereUniqueInput!]
}

input OwnBookCreateWithoutUserInput {
  id: ID
  name: String!
  author: String
  published_year: Int
  genre: Int
  imageId: String
  sharingType: Int
  search: String
}

"""An edge in a connection."""
type OwnBookEdge {
  """The item at the end of the edge."""
  node: OwnBook!

  """A cursor for use in pagination."""
  cursor: String!
}

enum OwnBookOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  author_ASC
  author_DESC
  published_year_ASC
  published_year_DESC
  genre_ASC
  genre_DESC
  imageId_ASC
  imageId_DESC
  sharingType_ASC
  sharingType_DESC
  search_ASC
  search_DESC
}

type OwnBookPreviousValues {
  id: ID!
  name: String!
  author: String
  published_year: Int
  genre: Int
  imageId: String
  sharingType: Int
  search: String
}

input OwnBookScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [OwnBookScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [OwnBookScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [OwnBookScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  author: String

  """All values that are not equal to given value."""
  author_not: String

  """All values that are contained in given list."""
  author_in: [String!]

  """All values that are not contained in given list."""
  author_not_in: [String!]

  """All values less than the given value."""
  author_lt: String

  """All values less than or equal the given value."""
  author_lte: String

  """All values greater than the given value."""
  author_gt: String

  """All values greater than or equal the given value."""
  author_gte: String

  """All values containing the given string."""
  author_contains: String

  """All values not containing the given string."""
  author_not_contains: String

  """All values starting with the given string."""
  author_starts_with: String

  """All values not starting with the given string."""
  author_not_starts_with: String

  """All values ending with the given string."""
  author_ends_with: String

  """All values not ending with the given string."""
  author_not_ends_with: String
  published_year: Int

  """All values that are not equal to given value."""
  published_year_not: Int

  """All values that are contained in given list."""
  published_year_in: [Int!]

  """All values that are not contained in given list."""
  published_year_not_in: [Int!]

  """All values less than the given value."""
  published_year_lt: Int

  """All values less than or equal the given value."""
  published_year_lte: Int

  """All values greater than the given value."""
  published_year_gt: Int

  """All values greater than or equal the given value."""
  published_year_gte: Int
  genre: Int

  """All values that are not equal to given value."""
  genre_not: Int

  """All values that are contained in given list."""
  genre_in: [Int!]

  """All values that are not contained in given list."""
  genre_not_in: [Int!]

  """All values less than the given value."""
  genre_lt: Int

  """All values less than or equal the given value."""
  genre_lte: Int

  """All values greater than the given value."""
  genre_gt: Int

  """All values greater than or equal the given value."""
  genre_gte: Int
  imageId: String

  """All values that are not equal to given value."""
  imageId_not: String

  """All values that are contained in given list."""
  imageId_in: [String!]

  """All values that are not contained in given list."""
  imageId_not_in: [String!]

  """All values less than the given value."""
  imageId_lt: String

  """All values less than or equal the given value."""
  imageId_lte: String

  """All values greater than the given value."""
  imageId_gt: String

  """All values greater than or equal the given value."""
  imageId_gte: String

  """All values containing the given string."""
  imageId_contains: String

  """All values not containing the given string."""
  imageId_not_contains: String

  """All values starting with the given string."""
  imageId_starts_with: String

  """All values not starting with the given string."""
  imageId_not_starts_with: String

  """All values ending with the given string."""
  imageId_ends_with: String

  """All values not ending with the given string."""
  imageId_not_ends_with: String
  sharingType: Int

  """All values that are not equal to given value."""
  sharingType_not: Int

  """All values that are contained in given list."""
  sharingType_in: [Int!]

  """All values that are not contained in given list."""
  sharingType_not_in: [Int!]

  """All values less than the given value."""
  sharingType_lt: Int

  """All values less than or equal the given value."""
  sharingType_lte: Int

  """All values greater than the given value."""
  sharingType_gt: Int

  """All values greater than or equal the given value."""
  sharingType_gte: Int
  search: String

  """All values that are not equal to given value."""
  search_not: String

  """All values that are contained in given list."""
  search_in: [String!]

  """All values that are not contained in given list."""
  search_not_in: [String!]

  """All values less than the given value."""
  search_lt: String

  """All values less than or equal the given value."""
  search_lte: String

  """All values greater than the given value."""
  search_gt: String

  """All values greater than or equal the given value."""
  search_gte: String

  """All values containing the given string."""
  search_contains: String

  """All values not containing the given string."""
  search_not_contains: String

  """All values starting with the given string."""
  search_starts_with: String

  """All values not starting with the given string."""
  search_not_starts_with: String

  """All values ending with the given string."""
  search_ends_with: String

  """All values not ending with the given string."""
  search_not_ends_with: String
}

type OwnBookSubscriptionPayload {
  mutation: MutationType!
  node: OwnBook
  updatedFields: [String!]
  previousValues: OwnBookPreviousValues
}

input OwnBookSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [OwnBookSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [OwnBookSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [OwnBookSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: OwnBookWhereInput
}

input OwnBookUpdateInput {
  name: String
  author: String
  published_year: Int
  genre: Int
  imageId: String
  sharingType: Int
  search: String
  user: UserUpdateOneRequiredWithoutOwnBooksInput
}

input OwnBookUpdateManyDataInput {
  name: String
  author: String
  published_year: Int
  genre: Int
  imageId: String
  sharingType: Int
  search: String
}

input OwnBookUpdateManyMutationInput {
  name: String
  author: String
  published_year: Int
  genre: Int
  imageId: String
  sharingType: Int
  search: String
}

input OwnBookUpdateManyWithoutUserInput {
  create: [OwnBookCreateWithoutUserInput!]
  connect: [OwnBookWhereUniqueInput!]
  set: [OwnBookWhereUniqueInput!]
  disconnect: [OwnBookWhereUniqueInput!]
  delete: [OwnBookWhereUniqueInput!]
  update: [OwnBookUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [OwnBookUpdateManyWithWhereNestedInput!]
  deleteMany: [OwnBookScalarWhereInput!]
  upsert: [OwnBookUpsertWithWhereUniqueWithoutUserInput!]
}

input OwnBookUpdateManyWithWhereNestedInput {
  where: OwnBookScalarWhereInput!
  data: OwnBookUpdateManyDataInput!
}

input OwnBookUpdateWithoutUserDataInput {
  name: String
  author: String
  published_year: Int
  genre: Int
  imageId: String
  sharingType: Int
  search: String
}

input OwnBookUpdateWithWhereUniqueWithoutUserInput {
  where: OwnBookWhereUniqueInput!
  data: OwnBookUpdateWithoutUserDataInput!
}

input OwnBookUpsertWithWhereUniqueWithoutUserInput {
  where: OwnBookWhereUniqueInput!
  update: OwnBookUpdateWithoutUserDataInput!
  create: OwnBookCreateWithoutUserInput!
}

input OwnBookWhereInput {
  """Logical AND on all given filters."""
  AND: [OwnBookWhereInput!]

  """Logical OR on all given filters."""
  OR: [OwnBookWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [OwnBookWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  author: String

  """All values that are not equal to given value."""
  author_not: String

  """All values that are contained in given list."""
  author_in: [String!]

  """All values that are not contained in given list."""
  author_not_in: [String!]

  """All values less than the given value."""
  author_lt: String

  """All values less than or equal the given value."""
  author_lte: String

  """All values greater than the given value."""
  author_gt: String

  """All values greater than or equal the given value."""
  author_gte: String

  """All values containing the given string."""
  author_contains: String

  """All values not containing the given string."""
  author_not_contains: String

  """All values starting with the given string."""
  author_starts_with: String

  """All values not starting with the given string."""
  author_not_starts_with: String

  """All values ending with the given string."""
  author_ends_with: String

  """All values not ending with the given string."""
  author_not_ends_with: String
  published_year: Int

  """All values that are not equal to given value."""
  published_year_not: Int

  """All values that are contained in given list."""
  published_year_in: [Int!]

  """All values that are not contained in given list."""
  published_year_not_in: [Int!]

  """All values less than the given value."""
  published_year_lt: Int

  """All values less than or equal the given value."""
  published_year_lte: Int

  """All values greater than the given value."""
  published_year_gt: Int

  """All values greater than or equal the given value."""
  published_year_gte: Int
  genre: Int

  """All values that are not equal to given value."""
  genre_not: Int

  """All values that are contained in given list."""
  genre_in: [Int!]

  """All values that are not contained in given list."""
  genre_not_in: [Int!]

  """All values less than the given value."""
  genre_lt: Int

  """All values less than or equal the given value."""
  genre_lte: Int

  """All values greater than the given value."""
  genre_gt: Int

  """All values greater than or equal the given value."""
  genre_gte: Int
  imageId: String

  """All values that are not equal to given value."""
  imageId_not: String

  """All values that are contained in given list."""
  imageId_in: [String!]

  """All values that are not contained in given list."""
  imageId_not_in: [String!]

  """All values less than the given value."""
  imageId_lt: String

  """All values less than or equal the given value."""
  imageId_lte: String

  """All values greater than the given value."""
  imageId_gt: String

  """All values greater than or equal the given value."""
  imageId_gte: String

  """All values containing the given string."""
  imageId_contains: String

  """All values not containing the given string."""
  imageId_not_contains: String

  """All values starting with the given string."""
  imageId_starts_with: String

  """All values not starting with the given string."""
  imageId_not_starts_with: String

  """All values ending with the given string."""
  imageId_ends_with: String

  """All values not ending with the given string."""
  imageId_not_ends_with: String
  sharingType: Int

  """All values that are not equal to given value."""
  sharingType_not: Int

  """All values that are contained in given list."""
  sharingType_in: [Int!]

  """All values that are not contained in given list."""
  sharingType_not_in: [Int!]

  """All values less than the given value."""
  sharingType_lt: Int

  """All values less than or equal the given value."""
  sharingType_lte: Int

  """All values greater than the given value."""
  sharingType_gt: Int

  """All values greater than or equal the given value."""
  sharingType_gte: Int
  search: String

  """All values that are not equal to given value."""
  search_not: String

  """All values that are contained in given list."""
  search_in: [String!]

  """All values that are not contained in given list."""
  search_not_in: [String!]

  """All values less than the given value."""
  search_lt: String

  """All values less than or equal the given value."""
  search_lte: String

  """All values greater than the given value."""
  search_gt: String

  """All values greater than or equal the given value."""
  search_gte: String

  """All values containing the given string."""
  search_contains: String

  """All values not containing the given string."""
  search_not_contains: String

  """All values starting with the given string."""
  search_starts_with: String

  """All values not starting with the given string."""
  search_not_starts_with: String

  """All values ending with the given string."""
  search_ends_with: String

  """All values not ending with the given string."""
  search_not_ends_with: String
  user: UserWhereInput
}

input OwnBookWhereUniqueInput {
  id: ID
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

enum PrismaDatabase {
  default
}

type Query {
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  ownBooks(where: OwnBookWhereInput, orderBy: OwnBookOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [OwnBook]!
  wishBooks(where: WishBookWhereInput, orderBy: WishBookOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [WishBook]!
  user(where: UserWhereUniqueInput!): User
  ownBook(where: OwnBookWhereUniqueInput!): OwnBook
  wishBook(where: WishBookWhereUniqueInput!): WishBook
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  ownBooksConnection(where: OwnBookWhereInput, orderBy: OwnBookOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): OwnBookConnection!
  wishBooksConnection(where: WishBookWhereInput, orderBy: WishBookOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): WishBookConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type Subscription {
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  ownBook(where: OwnBookSubscriptionWhereInput): OwnBookSubscriptionPayload
  wishBook(where: WishBookSubscriptionWhereInput): WishBookSubscriptionPayload
}

type User implements Node {
  id: ID!
  name: String!
  email: String!
  password: String!
  phoneNumber: String
  ownBooks(where: OwnBookWhereInput, orderBy: OwnBookOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [OwnBook!]
  wishBooks(where: WishBookWhereInput, orderBy: WishBookOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [WishBook!]
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  name: String!
  email: String!
  password: String!
  phoneNumber: String
  ownBooks: OwnBookCreateManyWithoutUserInput
  wishBooks: WishBookCreateManyWithoutUserInput
}

input UserCreateOneWithoutOwnBooksInput {
  create: UserCreateWithoutOwnBooksInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutWishBooksInput {
  create: UserCreateWithoutWishBooksInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutOwnBooksInput {
  id: ID
  name: String!
  email: String!
  password: String!
  phoneNumber: String
  wishBooks: WishBookCreateManyWithoutUserInput
}

input UserCreateWithoutWishBooksInput {
  id: ID
  name: String!
  email: String!
  password: String!
  phoneNumber: String
  ownBooks: OwnBookCreateManyWithoutUserInput
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  phoneNumber_ASC
  phoneNumber_DESC
}

type UserPreviousValues {
  id: ID!
  name: String!
  email: String!
  password: String!
  phoneNumber: String
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  phoneNumber: String
  ownBooks: OwnBookUpdateManyWithoutUserInput
  wishBooks: WishBookUpdateManyWithoutUserInput
}

input UserUpdateManyMutationInput {
  name: String
  email: String
  password: String
  phoneNumber: String
}

input UserUpdateOneRequiredWithoutOwnBooksInput {
  create: UserCreateWithoutOwnBooksInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutOwnBooksDataInput
  upsert: UserUpsertWithoutOwnBooksInput
}

input UserUpdateOneRequiredWithoutWishBooksInput {
  create: UserCreateWithoutWishBooksInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutWishBooksDataInput
  upsert: UserUpsertWithoutWishBooksInput
}

input UserUpdateWithoutOwnBooksDataInput {
  name: String
  email: String
  password: String
  phoneNumber: String
  wishBooks: WishBookUpdateManyWithoutUserInput
}

input UserUpdateWithoutWishBooksDataInput {
  name: String
  email: String
  password: String
  phoneNumber: String
  ownBooks: OwnBookUpdateManyWithoutUserInput
}

input UserUpsertWithoutOwnBooksInput {
  update: UserUpdateWithoutOwnBooksDataInput!
  create: UserCreateWithoutOwnBooksInput!
}

input UserUpsertWithoutWishBooksInput {
  update: UserUpdateWithoutWishBooksDataInput!
  create: UserCreateWithoutWishBooksInput!
}

input UserWhereInput {
  """Logical AND on all given filters."""
  AND: [UserWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  password: String

  """All values that are not equal to given value."""
  password_not: String

  """All values that are contained in given list."""
  password_in: [String!]

  """All values that are not contained in given list."""
  password_not_in: [String!]

  """All values less than the given value."""
  password_lt: String

  """All values less than or equal the given value."""
  password_lte: String

  """All values greater than the given value."""
  password_gt: String

  """All values greater than or equal the given value."""
  password_gte: String

  """All values containing the given string."""
  password_contains: String

  """All values not containing the given string."""
  password_not_contains: String

  """All values starting with the given string."""
  password_starts_with: String

  """All values not starting with the given string."""
  password_not_starts_with: String

  """All values ending with the given string."""
  password_ends_with: String

  """All values not ending with the given string."""
  password_not_ends_with: String
  phoneNumber: String

  """All values that are not equal to given value."""
  phoneNumber_not: String

  """All values that are contained in given list."""
  phoneNumber_in: [String!]

  """All values that are not contained in given list."""
  phoneNumber_not_in: [String!]

  """All values less than the given value."""
  phoneNumber_lt: String

  """All values less than or equal the given value."""
  phoneNumber_lte: String

  """All values greater than the given value."""
  phoneNumber_gt: String

  """All values greater than or equal the given value."""
  phoneNumber_gte: String

  """All values containing the given string."""
  phoneNumber_contains: String

  """All values not containing the given string."""
  phoneNumber_not_contains: String

  """All values starting with the given string."""
  phoneNumber_starts_with: String

  """All values not starting with the given string."""
  phoneNumber_not_starts_with: String

  """All values ending with the given string."""
  phoneNumber_ends_with: String

  """All values not ending with the given string."""
  phoneNumber_not_ends_with: String
  ownBooks_every: OwnBookWhereInput
  ownBooks_some: OwnBookWhereInput
  ownBooks_none: OwnBookWhereInput
  wishBooks_every: WishBookWhereInput
  wishBooks_some: WishBookWhereInput
  wishBooks_none: WishBookWhereInput
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

type WishBook implements Node {
  id: ID!
  name: String!
  author: String
  genre: Int
  user: User!
}

"""A connection to a list of items."""
type WishBookConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [WishBookEdge]!
  aggregate: AggregateWishBook!
}

input WishBookCreateInput {
  id: ID
  name: String!
  author: String
  genre: Int
  user: UserCreateOneWithoutWishBooksInput!
}

input WishBookCreateManyWithoutUserInput {
  create: [WishBookCreateWithoutUserInput!]
  connect: [WishBookWhereUniqueInput!]
}

input WishBookCreateWithoutUserInput {
  id: ID
  name: String!
  author: String
  genre: Int
}

"""An edge in a connection."""
type WishBookEdge {
  """The item at the end of the edge."""
  node: WishBook!

  """A cursor for use in pagination."""
  cursor: String!
}

enum WishBookOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  author_ASC
  author_DESC
  genre_ASC
  genre_DESC
}

type WishBookPreviousValues {
  id: ID!
  name: String!
  author: String
  genre: Int
}

input WishBookScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [WishBookScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [WishBookScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [WishBookScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  author: String

  """All values that are not equal to given value."""
  author_not: String

  """All values that are contained in given list."""
  author_in: [String!]

  """All values that are not contained in given list."""
  author_not_in: [String!]

  """All values less than the given value."""
  author_lt: String

  """All values less than or equal the given value."""
  author_lte: String

  """All values greater than the given value."""
  author_gt: String

  """All values greater than or equal the given value."""
  author_gte: String

  """All values containing the given string."""
  author_contains: String

  """All values not containing the given string."""
  author_not_contains: String

  """All values starting with the given string."""
  author_starts_with: String

  """All values not starting with the given string."""
  author_not_starts_with: String

  """All values ending with the given string."""
  author_ends_with: String

  """All values not ending with the given string."""
  author_not_ends_with: String
  genre: Int

  """All values that are not equal to given value."""
  genre_not: Int

  """All values that are contained in given list."""
  genre_in: [Int!]

  """All values that are not contained in given list."""
  genre_not_in: [Int!]

  """All values less than the given value."""
  genre_lt: Int

  """All values less than or equal the given value."""
  genre_lte: Int

  """All values greater than the given value."""
  genre_gt: Int

  """All values greater than or equal the given value."""
  genre_gte: Int
}

type WishBookSubscriptionPayload {
  mutation: MutationType!
  node: WishBook
  updatedFields: [String!]
  previousValues: WishBookPreviousValues
}

input WishBookSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [WishBookSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [WishBookSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [WishBookSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: WishBookWhereInput
}

input WishBookUpdateInput {
  name: String
  author: String
  genre: Int
  user: UserUpdateOneRequiredWithoutWishBooksInput
}

input WishBookUpdateManyDataInput {
  name: String
  author: String
  genre: Int
}

input WishBookUpdateManyMutationInput {
  name: String
  author: String
  genre: Int
}

input WishBookUpdateManyWithoutUserInput {
  create: [WishBookCreateWithoutUserInput!]
  connect: [WishBookWhereUniqueInput!]
  set: [WishBookWhereUniqueInput!]
  disconnect: [WishBookWhereUniqueInput!]
  delete: [WishBookWhereUniqueInput!]
  update: [WishBookUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [WishBookUpdateManyWithWhereNestedInput!]
  deleteMany: [WishBookScalarWhereInput!]
  upsert: [WishBookUpsertWithWhereUniqueWithoutUserInput!]
}

input WishBookUpdateManyWithWhereNestedInput {
  where: WishBookScalarWhereInput!
  data: WishBookUpdateManyDataInput!
}

input WishBookUpdateWithoutUserDataInput {
  name: String
  author: String
  genre: Int
}

input WishBookUpdateWithWhereUniqueWithoutUserInput {
  where: WishBookWhereUniqueInput!
  data: WishBookUpdateWithoutUserDataInput!
}

input WishBookUpsertWithWhereUniqueWithoutUserInput {
  where: WishBookWhereUniqueInput!
  update: WishBookUpdateWithoutUserDataInput!
  create: WishBookCreateWithoutUserInput!
}

input WishBookWhereInput {
  """Logical AND on all given filters."""
  AND: [WishBookWhereInput!]

  """Logical OR on all given filters."""
  OR: [WishBookWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [WishBookWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  author: String

  """All values that are not equal to given value."""
  author_not: String

  """All values that are contained in given list."""
  author_in: [String!]

  """All values that are not contained in given list."""
  author_not_in: [String!]

  """All values less than the given value."""
  author_lt: String

  """All values less than or equal the given value."""
  author_lte: String

  """All values greater than the given value."""
  author_gt: String

  """All values greater than or equal the given value."""
  author_gte: String

  """All values containing the given string."""
  author_contains: String

  """All values not containing the given string."""
  author_not_contains: String

  """All values starting with the given string."""
  author_starts_with: String

  """All values not starting with the given string."""
  author_not_starts_with: String

  """All values ending with the given string."""
  author_ends_with: String

  """All values not ending with the given string."""
  author_not_ends_with: String
  genre: Int

  """All values that are not equal to given value."""
  genre_not: Int

  """All values that are contained in given list."""
  genre_in: [Int!]

  """All values that are not contained in given list."""
  genre_not_in: [Int!]

  """All values less than the given value."""
  genre_lt: Int

  """All values less than or equal the given value."""
  genre_lte: Int

  """All values greater than the given value."""
  genre_gt: Int

  """All values greater than or equal the given value."""
  genre_gte: Int
  user: UserWhereInput
}

input WishBookWhereUniqueInput {
  id: ID
}
